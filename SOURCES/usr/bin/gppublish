#! /bin/bash
############################################################
#                                                          #
#                       gppublish                          #
#                                                          #
############################################################
#
# author:    mpuel@in2p3.fr
# date:      mardi 4 d√©cembre 2012, 10:47:27 (UTC+0100)
# copyright: Copyright (c) by IN2P3 computing centre, Villeurbanne (Lyon), France
#
# usage:  gppublish [-q] image cloud
#
# purpose:
#  * upload an image to glance 
#  * if -q option is provided, the image will be uploaded to a quarantine zone (only admin access)
#  * if no -q option, the image is not uploaded. The original image is deleted and the quarantined image is renamed.
#
# comment:
#  * update version with build suffix

source /etc/glancepush/glancepushrc
source /usr/share/glancepush/common.sh

get_vo_from_properties () {
	for prop in ${!properties[*]}; do 
		[[ "${properties[$prop]}" =~ "VMCATCHER_EVENT_VO" ]] && echo `expr match ${properties[$prop]}  '.*=\(.*\)'`; 
	done

}

get_tenant_from_vo () {
if [ "$1" = "undefined" ];
then
	python -c "import json,sys; json_data=json.load(open('$voms_map_file')); print ' '.join((str(i['tenant']) for i in json_data.values()))"
else
	python -c "import json,sys; json_data=json.load(open('$voms_map_file')); print str(json_data.get('$1').get('tenant'))"
fi
}

usg="usage:  gppublish [-q] {imagename|imagefile} cloud"
[ "$1" = -q ] && { opt_q=0; shift; } || opt_q=1

name=$1
cloud=$2
[ -z "$name" -o -z "$cloud" -o "$name" = -h -o "$name" = --help ] && { echo "$usg"; exit 1; }
[ -f $meta/$name -a -s $meta/$name ] || { echo "meta <$meta/$name> not found"; exit 1; }

source $meta/$name

source $clouds/${cloud}.creds
source $clouds/$cloud

voms_map_file=${voms_map_file:-/etc/keystone/voms.json}
vers_suffix=$(date +%y%m%d)
released_uuid=$(glance_id "$name")
testing_tenant_id=$(tenant_id "$testing_tenant")
[ -z "$testing_tenant_id" ] && { _err "the configured Openstack user seems not to have the apropriate roles defined in keystone: unable to check testing tenant id"; exit 1; }

# publish in the quarantine area
if [ $opt_q = 0 ]
then
    
    # check image file
    imagefile=$(image_path "$name")
    [ -f "$imagefile"  ] || { echo "no such file <$imagefile>"; exit 1; }
    
    if [ -n "$released_uuid" ]
    then
        former_version=$(glance image-show $released_uuid | egrep "Property 'version'" | cut -d\| -f3)
        former_version=${former_version// /}
        if [ -n "$former_version" ]
        then
            version=${former_version%.*}.${vers_suffix}
        fi
    fi
    version=${version:-1.0}
    
    _debug "remove existing queued images <${name}.q>"
    purge_image "${name}.q"

    # check if there is an array for the properties
    if [ ${#properties[*]} -gt 0 ]
        then
        props=""
        for prop in ${!properties[*]}
        do
            propv="${properties[$prop]}"
            [[ "$propv" =~ "=" ]] || propv="$prop=$propv"
            props="$props --property '$propv'"
        done
        _debug "setting properties: $props"
    fi
    
    _log "uploading image <$name> to glance (quarantine) on cloud <$cloud>, version=$version"
    uuid=$(
        (
            if [ -s $transform/$name ]
            then
                _debug "use found transform script"
                $transform/${name} < "$imagefile"
            else
                _debug "no transform script found"
                cat "$imagefile"
            fi
        ) | eval glance image-create \
            --name ${name}.q \
            --is-protected False \
            --disk-format ${disk_format:-raw} \
            --is-public False \
            --min-disk ${min_disk:-10} \
            $props \
            --property version=$version \
            --container-format ${container_format:-bare} \
            | awk '/ id /{print $4}'
    )
    
    _debug "provide access to testing tenant <$testing_tenant>"
    q_uuid=$(glance_id ${name}.q)
    glance member-create $q_uuid $testing_tenant_id
    
# really publish image
else
    
    q_uuid=$(glance_id ${name}.q)
    [ $(echo "$q_uuid" | wc -w) != 1 ] && { _err "zero or several images ${name}.q found on cloud <$cloud>"; exit 1; }
    
    if [ -n "$released_uuid" ]
    then
        _log "remove previously released image on cloud <$cloud>"
        glance image-update $released_uuid --is-protected False <&-
        glance -f image-delete $released_uuid
    fi
    
    auth_tenants=$(get_tenant_from_vo $(get_vo_from_properties))
    for at in $auth_tenants
    do
            _debug "release image to desired tenant: <$at> on cloud <$cloud>"
            t_id="$(tenant_id "$at")"
            if [ -n "$t_id" ]
                then
                glance member-create $q_uuid $t_id
            else
                _debug "no such tenant $at in keystone@$cloud"
            fi
            
    done

    _debug "remove testing tenant auth on cloud <$cloud>"
    glance member-delete $q_uuid $testing_tenant_id
    
    if glance image-update $q_uuid --name $name --is-protected ${is_protected:-True} <&-
    then
        _debug "success setting final name <$name> on cloud <$cloud>"
        exit 0
    else
        _err "error while renaming final image <$name> on cloud <$cloud>"
        exit 1
    fi
    
fi

