#! /bin/bash
############################################################
#                                                          #
#                         gpupdate                         #
#                                                          #
############################################################
#
# author:    mpuel@in2p3.fr
# date:      vendredi 8 f√©vrier 2013, 11:06:55 (UTC+0100)
# copyright: Copyright (c) by IN2P3 computing centre, Villeurbanne (Lyon), France
#
# usage:  gpupdate
#
# purpose:
#  * for every image updated in vmcatcher's cache:
#    - instanciate
#    - apply policy checks 
#    - publish image if tests succeed

source /usr/share/glancepush/common.sh
source /etc/glancepush/glancepushrc

if [ "$(pgrep -o gpupdate)" != $$ ]
    then
    _err "another gpupdate process is running, abort"
    exit 1
fi


_debug "gpupdate start"
cd $meta

# check every files
for image in $(updated)
do
    
    source $meta/$image
    source $spooldir/$image
    update_errs=0
    for cloud in $target_clouds
    do        
        source $clouds/${cloud}.creds
        source $clouds/$cloud
        key=$clouds/${cloud}.key
        
        # image removal
        if [ "$file" == "#DELETE#" ]; then
             gpdelete "$image" "$cloud"
             if [ $? -ne 0 ]
             then
                  _err "error while deleting image <$image> to quarantine zone of cloud <$cloud>"
                  let update_errs++
                  continue
             fi
             continue
        fi

        # quarantine publication
        gppublish -q "$image" "$cloud"
        if [ $? -ne 0 ]
        then
            _err "error while publishing image <$image> to quarantine zone of cloud <$cloud>"
            let update_errs++
            continue
        fi

        # policy validation
        if gppolcheck "$image" "$cloud"
        then
            _log "policy validation passed for image <$image> in cloud <$cloud>"
        else
            _err "image <$image> failed policy validation in cloud <$cloud>"
            let update_errs++
            continue
        fi

        # publication
        if gppublish "$image" "$cloud"
        then
            _log "image <$image> successfully released in cloud <$cloud>"
        else
            _err "an error occured while releasing image <$image> in cloud <$cloud>"
            let update_errs++
        fi

    done

    # remove update flag
    if [ $update_errs = 0 ]
        then
        update_done "$image"
    fi
done
